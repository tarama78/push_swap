/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_resolve_swap.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tnicolas <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/01/15 19:21:06 by tnicolas          #+#    #+#             */
/*   Updated: 2018/01/16 14:50:30 by tnicolas         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
**   ____________________________________________________________
**   | ft_resolve_swap.c                                        |
**   |     ft_sort_int(14 lines)                                |
**   |     ft_getlast(6 lines)                                  |
**   |     ft_put_middle(4 lines)                               |
**   |     ft_sort_bloc(25 lines)                               |
**   |     ft_recurs(24 lines)                                  |
**   |     ft_resolve_swap(3 lines)                             |
**   |     ft_print_a(3 lines)                                  |
**   |     ft_print_b(3 lines)                                  |
**   |     ft_print(2 lines)                                    |
**   | MEUUUU too many functions                                |
**   ------------------------------------------------------------
**           __n__n__  /
**    .------`-\00/-'/
**   /  ##  ## (oo)
**  / \## __   ./
**     |
**     |||   |||
*/

#include <push_swap.h>

static void	ft_sort_int(t_a *a, int sz_sort)
{
	ft_printf("{red}");//dd
	if (a->stk_a->nb > a->stk_a->next->nb)
		ft_sa(a, 1);
	if (sz_sort == 3)
	{
		if (a->stk_a->next->nb > a->stk_a->next->next->nb)
		{
			ft_pb(a, 1);
			ft_sort_int(a, 2);
			ft_pa(a, 1);
			ft_sort_int(a, 2);
		}
	}
	ft_printf("{eoc}");//dd
}

static int	ft_getlast(t_a *a, int sz)
{
	t_stk	*ret;

	ret = a->stk_a;
	while (--sz > 0)
		ret = ret->next;
	return (ret->nb);
}

static void	ft_put_middle(t_a *a, int *sz1, int *sz2, int last_nb)
{
	while (*sz1 > 0 && a->)
	{

	}
}

static void	ft_sort_bloc(t_a *a, int sz_sort)
{
	
	int		sz1;
	int		sz2;
	int		last_nb;

	ft_print(a);//dd
	ft_printf("{green}");//dd
	sz1 = sz_sort >> 1;
	if ((sz_sort & 1) == 0)
		sz2 = sz1;
	else
		sz2 = sz1 + 1;
	while (sz2 > 0)
	{
		last_nb = ft_getlast(a, sz1);
		ft_printf("last_nb %d\n", last_nb);
		if (a->stk_b->nb < a->stk_a->nb)
			ft_pa(a, 1);
		else
		{
			ft_put_middle(a, sz1, sz2, last_nb);
		}
		--sz2;
		++sz1;
	}
	ft_printf("{eoc}");//dd
}

static void	ft_recurs(t_a *a, int sz_sort)
{
	int		i;
	int		sz1;
	int		sz2;

	if (sz_sort <= 3)
	{
		ft_printf("sort_int\n");//dd
		ft_sort_int(a, sz_sort);
		return ;
	}
	sz1 = sz_sort >> 1;
	if ((sz_sort & 1) == 0)
		sz2 = sz1;
	else
		sz2 = sz1 + 1;
	ft_recurs(a, sz1);
	ft_printf("{magenta}");//dd
	i = -1;
	while (++i < sz1)
		ft_pb(a, 1);
	ft_printf("{eoc}");//dd
	ft_recurs(a, sz2);
	ft_printf("sort_bloc\n");//dd
	ft_sort_bloc(a, sz_sort);
}

void		ft_resolve_swap(t_a *a)
{
	ft_print(a);//dd
	ft_recurs(a, a->sz_list);
	ft_print(a);//dd
}


void		ft_print_a(t_a *a)
{
		ft_printf("stack a:\n<<<\n{yellow}");
		ft_stk_print(a->stk_a);
		ft_printf("{eoc}>>>\n");
}

void		ft_print_b(t_a *a)
{
		ft_printf("stack b:\n<<<\n{yellow}");
		ft_stk_print(a->stk_b);
		ft_printf("{eoc}>>>\n");
}

void		ft_print(t_a *a)
{
	ft_print_a(a);
	ft_print_b(a);
}
